// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using NodeCanvas.Framework;
using ParadoxNotion.Design;
using uFrame.MVVM;


[ParadoxNotion.Design.CategoryAttribute("ViewModels/TestViewModel")]
[ParadoxNotion.Design.NameAttribute("Set Name")]
[AgentType(typeof(ViewBase))]
public class TestViewModelSetNameAction : NodeCanvas.Framework.ActionTask {
    
    [ParadoxNotion.Design.RequiredFieldAttribute()]
    public BBParameter<String> NewValue;
    
    private TestViewModel _viewModel;
    
    private ViewBase _view;
    
    protected override string info {
        get {
            return "Set Name On TestViewModel";
        }
    }
    
    protected override string OnInit() {
        _view = agent.GetComponent<ViewBase>();
        return base.OnInit();
    }
    
    protected override void OnExecute() {
        if (_view.IsBound) {
            if (_viewModel == null) {
                _viewModel = _view.ViewModelObject as TestViewModel;
            }
        }
        else {
            EndAction(false); return;
        }
        _viewModel.Name = NewValue.value;
        EndAction(true);
    }
}

[ParadoxNotion.Design.CategoryAttribute("ViewModels/TestViewModel")]
[ParadoxNotion.Design.NameAttribute("Get Name")]
[AgentType(typeof(ViewBase))]
public class TestViewModelGetNameAction : NodeCanvas.Framework.ActionTask {
    
    [NodeCanvas.Framework.BlackboardOnlyAttribute()]
    public BBParameter<String> CurrentValue;
    
    private TestViewModel _viewModel;
    
    private ViewBase _view;
    
    protected override string info {
        get {
            return "Get Name From TestViewModel";
        }
    }
    
    protected override string OnInit() {
        _view = agent.GetComponent<ViewBase>();
        return base.OnInit();
    }
    
    protected override void OnExecute() {
        if (_view.IsBound) {
            if (_viewModel == null) {
                _viewModel = _view.ViewModelObject as TestViewModel;
            }
        }
        else {
            EndAction(false); return;
        }
        CurrentValue.value = _viewModel.Name;
        EndAction(true);
    }
}

[ParadoxNotion.Design.CategoryAttribute("ViewModels/TestViewModel")]
[ParadoxNotion.Design.NameAttribute("Execute DoSomething")]
[AgentType(typeof(ViewBase))]
public class TestViewModelExecuteDoSomethingAction : NodeCanvas.Framework.ActionTask {
    
    private TestViewModel _viewModel;
    
    private ViewBase _view;
    
    protected override string info {
        get {
            return "Execute DoSomething On TestViewModel";
        }
    }
    
    protected override string OnInit() {
        _view = agent.GetComponent<ViewBase>();
        return base.OnInit();
    }
    
    protected override void OnExecute() {
        if (_view.IsBound) {
            if (_viewModel == null) {
                _viewModel = _view.ViewModelObject as TestViewModel;
            }
        }
        else {
            EndAction(false); return;
        }
        _viewModel.DoSomething.OnNext(new DoSomethingCommand { Sender = _viewModel });
        EndAction(true);
    }
}

[ParadoxNotion.Design.CategoryAttribute("ViewModels/TestViewModel")]
[ParadoxNotion.Design.NameAttribute("Execute DoSomethingElse")]
[AgentType(typeof(ViewBase))]
public class TestViewModelExecuteDoSomethingElseAction : NodeCanvas.Framework.ActionTask {
    
    private TestViewModel _viewModel;
    
    private ViewBase _view;
    
    [ParadoxNotion.Design.RequiredFieldAttribute()]
    public BBParameter<Boolean> CommandArgument;
    
    protected override string info {
        get {
            return "Execute DoSomethingElse On TestViewModel";
        }
    }
    
    protected override string OnInit() {
        _view = agent.GetComponent<ViewBase>();
        return base.OnInit();
    }
    
    protected override void OnExecute() {
        if (_view.IsBound) {
            if (_viewModel == null) {
                _viewModel = _view.ViewModelObject as TestViewModel;
            }
        }
        else {
            EndAction(false); return;
        }
        _viewModel.DoSomethingElse.OnNext(new DoSomethingElseCommand { Sender = _viewModel, Argument = CommandArgument.value });
        EndAction(true);
    }
}

[ParadoxNotion.Design.CategoryAttribute("ViewModels/TestViewModel")]
[ParadoxNotion.Design.NameAttribute("Set IsAmazing")]
[AgentType(typeof(ViewBase))]
public class TestViewModelSetIsAmazingAction : NodeCanvas.Framework.ActionTask {
    
    [ParadoxNotion.Design.RequiredFieldAttribute()]
    public BBParameter<Boolean> NewValue;
    
    private TestViewModel _viewModel;
    
    private ViewBase _view;
    
    protected override string info {
        get {
            return "Set IsAmazing On TestViewModel";
        }
    }
    
    protected override string OnInit() {
        _view = agent.GetComponent<ViewBase>();
        return base.OnInit();
    }
    
    protected override void OnExecute() {
        if (_view.IsBound) {
            if (_viewModel == null) {
                _viewModel = _view.ViewModelObject as TestViewModel;
            }
        }
        else {
            EndAction(false); return;
        }
        _viewModel.IsAmazing = NewValue.value;
        EndAction(true);
    }
}

[ParadoxNotion.Design.CategoryAttribute("ViewModels/TestViewModel")]
[ParadoxNotion.Design.NameAttribute("Get IsAmazing")]
[AgentType(typeof(ViewBase))]
public class TestViewModelGetIsAmazingAction : NodeCanvas.Framework.ActionTask {
    
    [NodeCanvas.Framework.BlackboardOnlyAttribute()]
    public BBParameter<Boolean> CurrentValue;
    
    private TestViewModel _viewModel;
    
    private ViewBase _view;
    
    protected override string info {
        get {
            return "Get IsAmazing From TestViewModel";
        }
    }
    
    protected override string OnInit() {
        _view = agent.GetComponent<ViewBase>();
        return base.OnInit();
    }
    
    protected override void OnExecute() {
        if (_view.IsBound) {
            if (_viewModel == null) {
                _viewModel = _view.ViewModelObject as TestViewModel;
            }
        }
        else {
            EndAction(false); return;
        }
        CurrentValue.value = _viewModel.IsAmazing;
        EndAction(true);
    }
}

[ParadoxNotion.Design.CategoryAttribute("ViewModels/TestViewModel")]
[ParadoxNotion.Design.NameAttribute("Check IsAmazing")]
[UnityEngine.RequireComponent(typeof(ViewBase))]
[AgentType(typeof(ViewBase))]
public class TestViewModelCheckIsAmazingAction : NodeCanvas.Framework.ConditionTask {
    
    private TestViewModel _viewModel;
    
    private ViewBase _view;
    
    protected override string info {
        get {
            return "TestViewModel's IsAmazing";
        }
    }
    
    protected override string OnInit() {
        _view = agent.GetComponent<ViewBase>();
        return base.OnInit();
    }
    
    protected override bool OnCheck() {
        if (_view.IsBound) {
            if (_viewModel == null) {
                _viewModel = _view.ViewModelObject as TestViewModel;
            }
        }
        else {
            return false;
        }
        return _viewModel.IsAmazing;
    }
}

[ParadoxNotion.Design.CategoryAttribute("ViewModels/TestViewModel")]
[ParadoxNotion.Design.NameAttribute("Set Complex")]
[AgentType(typeof(ViewBase))]
public class TestViewModelSetComplexAction : NodeCanvas.Framework.ActionTask {
    
    [ParadoxNotion.Design.RequiredFieldAttribute()]
    public BBParameter<AmazingClass> NewValue;
    
    private TestViewModel _viewModel;
    
    private ViewBase _view;
    
    protected override string info {
        get {
            return "Set Complex On TestViewModel";
        }
    }
    
    protected override string OnInit() {
        _view = agent.GetComponent<ViewBase>();
        return base.OnInit();
    }
    
    protected override void OnExecute() {
        if (_view.IsBound) {
            if (_viewModel == null) {
                _viewModel = _view.ViewModelObject as TestViewModel;
            }
        }
        else {
            EndAction(false); return;
        }
        _viewModel.Complex = NewValue.value;
        EndAction(true);
    }
}

[ParadoxNotion.Design.CategoryAttribute("ViewModels/TestViewModel")]
[ParadoxNotion.Design.NameAttribute("Get Complex")]
[AgentType(typeof(ViewBase))]
public class TestViewModelGetComplexAction : NodeCanvas.Framework.ActionTask {
    
    [NodeCanvas.Framework.BlackboardOnlyAttribute()]
    public BBParameter<AmazingClass> CurrentValue;
    
    private TestViewModel _viewModel;
    
    private ViewBase _view;
    
    protected override string info {
        get {
            return "Get Complex From TestViewModel";
        }
    }
    
    protected override string OnInit() {
        _view = agent.GetComponent<ViewBase>();
        return base.OnInit();
    }
    
    protected override void OnExecute() {
        if (_view.IsBound) {
            if (_viewModel == null) {
                _viewModel = _view.ViewModelObject as TestViewModel;
            }
        }
        else {
            EndAction(false); return;
        }
        CurrentValue.value = _viewModel.Complex;
        EndAction(true);
    }
}

[ParadoxNotion.Design.CategoryAttribute("ViewModels/TestViewModel")]
[ParadoxNotion.Design.NameAttribute("Set Reference")]
[AgentType(typeof(ViewBase))]
public class TestViewModelSetReferenceAction : NodeCanvas.Framework.ActionTask {
    
    [ParadoxNotion.Design.RequiredFieldAttribute()]
    public BBParameter<SomeTypeReference> NewValue;
    
    private TestViewModel _viewModel;
    
    private ViewBase _view;
    
    protected override string info {
        get {
            return "Set Reference On TestViewModel";
        }
    }
    
    protected override string OnInit() {
        _view = agent.GetComponent<ViewBase>();
        return base.OnInit();
    }
    
    protected override void OnExecute() {
        if (_view.IsBound) {
            if (_viewModel == null) {
                _viewModel = _view.ViewModelObject as TestViewModel;
            }
        }
        else {
            EndAction(false); return;
        }
        _viewModel.Reference = NewValue.value;
        EndAction(true);
    }
}

[ParadoxNotion.Design.CategoryAttribute("ViewModels/TestViewModel")]
[ParadoxNotion.Design.NameAttribute("Get Reference")]
[AgentType(typeof(ViewBase))]
public class TestViewModelGetReferenceAction : NodeCanvas.Framework.ActionTask {
    
    [NodeCanvas.Framework.BlackboardOnlyAttribute()]
    public BBParameter<SomeTypeReference> CurrentValue;
    
    private TestViewModel _viewModel;
    
    private ViewBase _view;
    
    protected override string info {
        get {
            return "Get Reference From TestViewModel";
        }
    }
    
    protected override string OnInit() {
        _view = agent.GetComponent<ViewBase>();
        return base.OnInit();
    }
    
    protected override void OnExecute() {
        if (_view.IsBound) {
            if (_viewModel == null) {
                _viewModel = _view.ViewModelObject as TestViewModel;
            }
        }
        else {
            EndAction(false); return;
        }
        CurrentValue.value = _viewModel.Reference;
        EndAction(true);
    }
}

[ParadoxNotion.Design.CategoryAttribute("ViewModels/TestViewModel")]
[ParadoxNotion.Design.NameAttribute("Execute CommandReference")]
[AgentType(typeof(ViewBase))]
public class TestViewModelExecuteCommandReferenceAction : NodeCanvas.Framework.ActionTask {
    
    private TestViewModel _viewModel;
    
    private ViewBase _view;
    
    [ParadoxNotion.Design.RequiredFieldAttribute()]
    public BBParameter<SomeTypeReference> CommandArgument;
    
    protected override string info {
        get {
            return "Execute CommandReference On TestViewModel";
        }
    }
    
    protected override string OnInit() {
        _view = agent.GetComponent<ViewBase>();
        return base.OnInit();
    }
    
    protected override void OnExecute() {
        if (_view.IsBound) {
            if (_viewModel == null) {
                _viewModel = _view.ViewModelObject as TestViewModel;
            }
        }
        else {
            EndAction(false); return;
        }
        _viewModel.CommandReference.OnNext(new CommandReferenceCommand { Sender = _viewModel, Argument = CommandArgument.value });
        EndAction(true);
    }
}

[ParadoxNotion.Design.CategoryAttribute("ViewModels/TestViewModel")]
[ParadoxNotion.Design.NameAttribute("Get IsNameFrank")]
[AgentType(typeof(ViewBase))]
public class IsNameFrankViewModelGetIsNameFrankAction : NodeCanvas.Framework.ActionTask {
    
    [NodeCanvas.Framework.BlackboardOnlyAttribute()]
    public BBParameter<Boolean> CurrentValue;
    
    private TestViewModel _viewModel;
    
    private ViewBase _view;
    
    protected override string info {
        get {
            return "Get IsNameFrank From TestViewModel";
        }
    }
    
    protected override string OnInit() {
        _view = agent.GetComponent<ViewBase>();
        return base.OnInit();
    }
    
    protected override void OnExecute() {
        if (_view.IsBound) {
            if (_viewModel == null) {
                _viewModel = _view.ViewModelObject as TestViewModel;
            }
        }
        else {
            EndAction(false); return;
        }
        CurrentValue.value = _viewModel.IsNameFrank;
        EndAction(true);
    }
}

[ParadoxNotion.Design.CategoryAttribute("ViewModels/TestViewModel")]
[ParadoxNotion.Design.NameAttribute("Check IsNameFrank")]
[UnityEngine.RequireComponent(typeof(ViewBase))]
[AgentType(typeof(ViewBase))]
public class IsNameFrankViewModelCheckIsNameFrankAction : NodeCanvas.Framework.ConditionTask {
    
    private TestViewModel _viewModel;
    
    private ViewBase _view;
    
    protected override string info {
        get {
            return "TestViewModel's IsNameFrank";
        }
    }
    
    protected override string OnInit() {
        _view = agent.GetComponent<ViewBase>();
        return base.OnInit();
    }
    
    protected override bool OnCheck() {
        if (_view.IsBound) {
            if (_viewModel == null) {
                _viewModel = _view.ViewModelObject as TestViewModel;
            }
        }
        else {
            return false;
        }
        return _viewModel.IsNameFrank;
    }
}
