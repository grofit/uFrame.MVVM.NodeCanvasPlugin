// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using uFrame.Kernel;
using uFrame.MVVM;
using uFrame.MVVM.Services;
using uFrame.MVVM.Bindings;
using uFrame.Serialization;
using UniRx;
using UnityEngine;


public class TestViewBase : uFrame.MVVM.ViewBase {
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public String _Name;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Boolean _IsAmazing;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public AmazingClass _Complex;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public SomeTypeReference _Reference;
    
    public override string DefaultIdentifier {
        get {
            return base.DefaultIdentifier;
        }
    }
    
    public override System.Type ViewModelType {
        get {
            return typeof(TestViewModel);
        }
    }
    
    public TestViewModel Test {
        get {
            return (TestViewModel)ViewModelObject;
        }
    }
    
    protected override void InitializeViewModel(uFrame.MVVM.ViewModel model) {
        base.InitializeViewModel(model);
        // NOTE: this method is only invoked if the 'Initialize ViewModel' is checked in the inspector.
        // var vm = model as TestViewModel;
        // This method is invoked when applying the data from the inspector to the viewmodel.  Add any view-specific customizations here.
        var testview = ((TestViewModel)model);
        testview.Name = this._Name;
        testview.IsAmazing = this._IsAmazing;
        testview.Complex = this._Complex;
        testview.Reference = this._Reference;
    }
    
    public override void Bind() {
        base.Bind();
        // Use this.Test to access the viewmodel.
        // Use this method to subscribe to the view-model.
        // Any designer bindings are created in the base implementation.
    }
    
    public virtual void ExecuteDoSomething() {
        Test.DoSomething.OnNext(new DoSomethingCommand() { Sender = Test });
    }
    
    public virtual void ExecuteDoSomething(DoSomethingCommand command) {
        command.Sender = Test;
        Test.DoSomething.OnNext(command);
    }
    
    public virtual void ExecuteDoSomethingElse(DoSomethingElseCommand command) {
        command.Sender = Test;
        Test.DoSomethingElse.OnNext(command);
    }
    
    public virtual void ExecuteCommandReference(CommandReferenceCommand command) {
        command.Sender = Test;
        Test.CommandReference.OnNext(command);
    }
    
    public virtual void ExecuteDoSomethingElse(Boolean arg) {
        Test.DoSomethingElse.OnNext(new DoSomethingElseCommand() { Sender = Test, Argument = arg });
    }
    
    public virtual void ExecuteCommandReference(SomeTypeReference arg) {
        Test.CommandReference.OnNext(new CommandReferenceCommand() { Sender = Test, Argument = arg });
    }
}

public class SomeOtherViewBase : uFrame.MVVM.ViewBase {
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public String _Name;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Boolean _IsAmazing;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public AmazingClass _Complex;
    
    [UnityEngine.SerializeField()]
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public SomeTypeReference _Reference;
    
    public override string DefaultIdentifier {
        get {
            return base.DefaultIdentifier;
        }
    }
    
    public override System.Type ViewModelType {
        get {
            return typeof(TestViewModel);
        }
    }
    
    public TestViewModel Test {
        get {
            return (TestViewModel)ViewModelObject;
        }
    }
    
    protected override void InitializeViewModel(uFrame.MVVM.ViewModel model) {
        base.InitializeViewModel(model);
        // NOTE: this method is only invoked if the 'Initialize ViewModel' is checked in the inspector.
        // var vm = model as TestViewModel;
        // This method is invoked when applying the data from the inspector to the viewmodel.  Add any view-specific customizations here.
        var someotherview = ((TestViewModel)model);
        someotherview.Name = this._Name;
        someotherview.IsAmazing = this._IsAmazing;
        someotherview.Complex = this._Complex;
        someotherview.Reference = this._Reference;
    }
    
    public override void Bind() {
        base.Bind();
        // Use this.Test to access the viewmodel.
        // Use this method to subscribe to the view-model.
        // Any designer bindings are created in the base implementation.
    }
    
    public virtual void ExecuteDoSomething() {
        Test.DoSomething.OnNext(new DoSomethingCommand() { Sender = Test });
    }
    
    public virtual void ExecuteDoSomething(DoSomethingCommand command) {
        command.Sender = Test;
        Test.DoSomething.OnNext(command);
    }
    
    public virtual void ExecuteDoSomethingElse(DoSomethingElseCommand command) {
        command.Sender = Test;
        Test.DoSomethingElse.OnNext(command);
    }
    
    public virtual void ExecuteCommandReference(CommandReferenceCommand command) {
        command.Sender = Test;
        Test.CommandReference.OnNext(command);
    }
    
    public virtual void ExecuteDoSomethingElse(Boolean arg) {
        Test.DoSomethingElse.OnNext(new DoSomethingElseCommand() { Sender = Test, Argument = arg });
    }
    
    public virtual void ExecuteCommandReference(SomeTypeReference arg) {
        Test.CommandReference.OnNext(new CommandReferenceCommand() { Sender = Test, Argument = arg });
    }
}
